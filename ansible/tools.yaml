- name: Tools config
  hosts: tools
  become: true
  tasks:
    - name: Install dnf-plugins-core
      dnf:
        state: latest
        name: dnf-plugins-core

    - name: Add docker repository
      command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

    - name: Install docker
      dnf:
        state: latest
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin

    - name: Start docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create tools docker network
      docker_network:
        name: tools

    - name: Create haproxy docker config directory
      file:
        state: directory
        path: /opt/docker/haproxy

    - name: Copy haproxy config
      template:
        src: haproxy.cfg.jinja2
        dest: /opt/docker/haproxy/haproxy.cfg

    - name: Start haproxy docker container
      docker_container:
        name: haproxy
        image: haproxy:2.9.4
        state: started
        networks:
          - name: tools
        restart: yes
        restart_policy: always
        ports:
          - 80:80
          - 443:443
          - 6443:6443
        sysctls:
          net.ipv4.ip_unprivileged_port_start=0
        volumes:
          - /opt/docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg

    - name: Create tailscaled data directory
      file:
        state: directory
        path: /opt/docker/tailscaled/data

    - name: Start tailscaled docker container
      docker_container:
        name: tailscaled
        image: tailscale/tailscale:v1.58
        state: started
        networks:
          - name: tools
        restart: yes
        restart_policy: always
        volumes:
          - /opt/docker/tailscaled/data:/var/lib/tailscale
        env:
          TS_STATE_DIR="/var/lib/tailscale"
          TS_EXTRA_ARGS="--ssh --advertise-exit-node"
          TS_ROUTES="192.168.100.0/24"
          TS_AUTH_KEY="{{ lookup('ansible.builtin.env', 'TAILSCALE_KEY') }}"

    - name: Create cloudflared data directory
      docker_container:
        name: cloudflared
        image: cloudflare/cloudflared:2024.2.0
        state: started
        networks:
          - name: tools
        restart: yes
        restart_policy: always
        command:
          - tunnel
          - --no-autoupdate
          - run
          - --token
          - "{{ lookup('ansible.builtin.env', 'CLOUDFLARED_REFRESH_KEY') }}"

